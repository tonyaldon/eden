Boost your productivity with *Eden*, the intuitive *ChatGPT*
integration designed for Emacs users craving a clean, text-focused
interface that adapts to various workflows.

It seamlessly facilitates *branching conversations* making it the
perfect tool for effective *thinking* and *brainstorming*.

*Eden's interface* is simple:

- You want to ask something to *ChatGPT*, call ~eden~ command, enter your
  prompt, press ~C-c C-c~ and you're done.
- You want to integrate the response in your ~org-mode~ notes, just
  copy/paste it.
- You want to manage your configuration, call ~eden~ and explore the
  options in its transient menu.

*Eden* strikes the perfect balance by focusing on conversations without
enforcing them; defaulting to independent requests, it makes starting
new conversations or continuing from previous ones easy!

Another key feature of *Eden* is its ability to keep track of all your
interactions with *ChatGPT*.  Each request is stored in the ~eden-dir~
directory, providing a range of benefits:

1) Requests are always preserved, ensuring you can retrieve them at
   any time.
2) Should an error occur during processing, the corresponding
   ~error.json~ file can be consulted for troubleshooting.
3) All data is stored in JSON (or text format), facilitating
   integration with other software for further analysis.

* Get started in minutes

1) Ensure the following utilities are installed and present in one
   of your ~exec-path~ directories:

   - ~curl~
   - ~uuidgen~
   - ~pandoc~

2) Add the directory containing ~eden.el~ to your ~load-path~ and
   require the *Eden* package by adding the following lines to your init
   file, ensuring to replace ~/path/to/eden/~ with the appropriate
   directory:

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "/path/to/eden/")
   (require 'eden)
   #+END_SRC

3) Store your OpenAI API key in either the ~~/.authinfo.gpg~ file
   (encrypted with ~gpg~) or the ~~/.authinfo~ file (plaintext):

   - After funding your [[https://platform.openai.com][OpenAI account]] ($5.00 is enough to get
     started), create an OpenAI API key visiting
     https://platform.openai.com/api-keys.
   - Add the API key in the selected file as follows:

     #+BEGIN_SRC authinfo
     machine openai password <openai-api-key>
     #+END_SRC

     where ~<openai-api-key>~ is your API key.

4) Call the command ~eden~ to switch to ~*eden*~ prompt buffer,
5) Enter your prompt,
6) Press ~C-c C-c~ to send your prompt to OpenAI API,
7) Finally, the response will asynchronously show up in a dedicated
   buffer upon receipt.

* Utility requirements

Ensure the following utilities are installed and present in one
of your ~exec-path~ directories:

- ~curl~
- ~uuidgen~
- ~pandoc~

* Eden's interface is simple

1) You want to ask something to *ChatGPT*, call ~eden~ command, enter your
   prompt, press ~C-c C-c~ and you're done.
2) You want to integrate the response in your ~org-mode~ notes, just
   copy/paste it.
3) You want to manage your *configuration*, call ~eden~ from the prompt
   buffer and explore the options in its transient menu.  For
   instance, you can:

   - Show the current configuration by pressing ~C~,
   - Set the current API by pressing ~a~ or
   - Pick a system message by pressing ~p~.

4) You want to manage your *conversations*, call ~eden~ from the prompt
   buffer and explore the options in its transient menu.  For instance,
   you can:

   - Start a new conversation by pressing ~n~,
   - Switch to an existing conversation by pressing ~TAB~ or
   - Paused a conversation by pressing ~SPC~.

5) Finally, you can also continue or inspect a conversation from a
   *request at point* by calling ~eden~ with the prefix argument ~C-u~.
   This will bring up ~eden-req-at-point-menu~, offering various actions
   related to the request at point.

* Eden keeps track of all your interactions with ChatGPT

Another key feature of *Eden* is its ability to keep track of all your
interactions with *ChatGPT* or any OpenAI-compatible API.

Each request is stored in the ~eden-dir~ directory, which defaults to
the ~eden~ subdirectory within your ~user-emacs-directory~, providing a
range of benefits:

1) Requests are always preserved, ensuring you can retrieve them at
   any time.
2) With the request's UUID, you can track down the associated
   request and check details like the API, model, system prompt, and
   timestamp.
3) Should an error occur during processing, the corresponding
   ~error.json~ file can be consulted for troubleshooting.
4) You can start or continue a conversation from any existing request
   (a feature known as "branching"):
   - Either from a request at point in your notes,
   - Or navigating through history in the prompt buffer using ~M-p~ and
     ~M-n~ to find the desired request, opening the menu with ~eden~, and
     pressing ~c~ to continue the conversation or ~s~ to start a new
     conversation from the request.
5) All data is stored in JSON (or text format), facilitating
   integration with other software for further analysis.

* Eden focuses on conversations without enforcing them

*Eden* strikes the perfect balance by focusing on conversations without
enforcing them; defaulting to independent requests, it makes starting
new conversations or continuing from previous ones easy!

There are several ways to engage in a conversation while in the prompt
buffer:

1) To start a new conversation, call the ~eden~ command, press ~n~,
   and enter a title.  This creates a new empty conversation, setting
   it as the current one for all new requests.

2) To start a conversation from the current request in history
   (excluding earlier exchanges), navigate through the history using
   ~M-p~ and ~M-n~ to find the desired request.  Then, call the ~eden~
   command, press ~s~, and enter a title.  This creates a new
   conversation that already include one exchange.

3) To continue an existing conversation call the ~eden~ command, press
   ~c~, and enter a title.  This will include all previous exchanges of
   the current request in history.

You can pause the current conversation by calling ~eden~ and pressing
~SPC~.  Subsequent requests sent to *ChatGPT* or any OpenAI-compatible API
will then be independent again.

Note that conversation titles and IDs are not stored; they only exist
during your Emacs session.  However, you can retrieve any conversation
later either by saving its UUID in your notes or navigating the prompt
history with ~M-p~ and ~M-n~.

* What are requests at point?

Calling ~eden~ with the ~C-u~ prefix argument opens a menu with available
actions related to the request at point.

If the point is on an ~org-mode~ heading which includes the
property ~eden-org-property-req~ (by default ~EDEN_REQ~), indicating that
a request exists at that position, you can apply one of the action
listed in the menu.

For instance:

- Pressing ~c~ will continue a conversation whose last request is the
  request at point,
- Pressing ~b~ will show the conversation branches of the request at
  point (all the conversations containing the request at point).

* Including reasoning for Deepseek-compatible APIs

Some models, such as ~deepseek-reasoner~ from [[https://www.deepseek.com][Deepseek]], generate
responses based on their internal reasoning process and provide access
to this reasoning.

To include this reasoning in Eden conversations for
Deepseek-compatible APIs, set the variable
~eden-conversation-include-reasoning~ to ~t~.

Additionally, regardless of this setting, you can display the
reasoning of a request at point by calling ~eden~ with the ~C-u~ prefix
argument and pressing ~R~.  A buffer will pop up with the corresponding
reasoning.

* Configuring Eden

In the prompt buffer, you can call ~eden~ and press ~C~ to show the
current configuration.

From the menu provided by ~eden~, you can modify the current
configuration doing the following

- Press ~a~ to set the current API (~eden-api-set~),
- Press ~m~ to set the model for the current API (~eden-model-set~),
- Press ~t~ to set the temperature (~eden-temperature-set~),
- Press ~d~ to set the request directory (~eden-dir-set~),
- Press ~i~ to include reasoning information (~eden-conversation-include-reasoning-toggle~),

or the following for modifying the system message:

- Press ~+~ to add a system message (~eden-system-message-add~),
- Press ~u~ to update the system message (~eden-system-message-update~),
- Press ~p~ to pick a system message (~eden-system-message-set~),
- Press ~_~ to reset the system message (~eden-system-message-reset~).

** Navigating the profile history

Each time you quit Eden's menu, the current *profile* which includes

- the API,
- the request directory,
- the model,
- the temperature,
- the current conversation if any, and,
- the system message if any

is pushed to an history that you can navigate from the prompt buffer
with:

- ~C-M-p~ bound to ~eden-profile-previous~ and
- ~C-M-n~ bound to ~eden-profile-next~.

** The complete list of user variables

The complete list of user variables you may want to adjust includes:

- ~eden-api~
- ~eden-apis~
- ~eden-model~
- ~eden-temperature~
- ~eden-system-message~
- ~eden-system-messages~
- ~eden-system-message->developer-for-models~
- ~eden-dir~
- ~eden-org-property-date~
- ~eden-org-property-req~
- ~eden-pops-up-upon-receipt~
- ~eden-conversation-include-reasoning~
- ~eden-prompt-buffer-name~

For more information on these variables, consult their documentation
in the ~*Help*~ buffer using ~describe-variable~ command, bound by default
to ~C-h v~.

* Adding Perplexity API key

To use Perplexity API, you can either set ~eden-api~ to

#+BEGIN_SRC emacs-lisp
(:service "perplexity"
 :endpoint "https://api.perplexity.ai/chat/completions")
#+END_SRC

and ~eden-model~ to a model supported by Perplexity API like this

#+BEGIN_SRC emacs-lisp
"sonar"
#+END_SRC

or you can select Perplexity API by calling ~eden~ in the prompt buffer,
pressing the key ~a~ and selecting ~perplexity~.

In both cases you need to store your Perplexity API key in either the
~~/.authinfo.gpg~ file (encrypted with ~gpg~) or the ~~/.authinfo~ file
(plaintext):

- After funding your [[https://www.perplexity.ai][Perplexity account]] ($5.00 is enough to get
  started), create a Perplexity API key visiting
  https://www.perplexity.ai/settings/api.
- Add the API key in the selected file as follows:

  #+BEGIN_SRC authinfo
  machine perplexity password <perplexity-api-key>
  #+END_SRC

  where ~<perplexity-api-key>~ is your API key.

* Adding Deepseek API key

Store your Deepseek API key in either the ~~/.authinfo.gpg~ file
(encrypted with ~gpg~) or the ~~/.authinfo~ file (plaintext):

- After funding your [[https://platform.deepseek.com][Deepseek account]] ($5.00 is enough to get
  started), create a Deepseek API key visiting
  https://platform.deepseek.com/api_keys.
- Add the API key in the selected file as follows:

  #+BEGIN_SRC authinfo
  machine deepseek password <deepseek-api-key>
  #+END_SRC

  where ~<deepseek-api-key>~ is your API key.

* Adding an OpenAI-compatible API to eden-apis

Let's take an example with X.ai API, an OpenAI-compatible API.

If you want to use X.ai API alongside other OpenAI-compatible APIs,
start by adding its description to the ~eden-apis~ variable as follows:

#+BEGIN_SRC emacs-lisp
(add-to-list 'eden-apis
             '(:service "x.ai"
               :endpoint "https://api.x.ai/v1/chat/completions"
               :default-model "grok-2"
               :models ("grok-beta" "grok-2-latest" "grok-2" "grok-2-12-12")))
#+END_SRC

Then you need to store your X.ai API key in either the ~~/.authinfo.gpg~
file (encrypted with ~gpg~) or the ~~/.authinfo~ file (plaintext):

- After funding your [[https://console.x.ai][X.ai account]] ($5.00 is enough to get started),
  create an X.ai API key in that same console.
- Add the API key in the selected file as follows:

  #+BEGIN_SRC authinfo
  machine x.ai password <x.ai-api-key>
  #+END_SRC

  where ~<x.ai-api-key>~ is your API key.

Finally, you can select X.ai API with ~grok-2~ default model by calling
~eden~ in the prompt buffer, pressing the key ~a~ and selecting ~x.ai~.
