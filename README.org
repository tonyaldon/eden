Eden is an AI assistant package for Emacs.

It offers a simple interface for:

1) OpenAI LLM models (like ~gpt-4o~ and ~o1~) and
2) Perplexity AI powered answer engine.

More broadly it works with any OpenAI-compatible API.

* Get started in minutes

# TO BE CONTINUED...
# utility requirement: curl, uuidgen, pandoc

1) Ensure the directory holding ~eden.el~ file is in your ~load-path~ and
   require ~eden~ package.  This can be done by adding the following
   expressions to your init file (replacing ~/path/to/eden/~ with the
   correct directory location):

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "/path/to/eden/")
   (require 'eden)
   #+END_SRC

2) Add your OpenAI API key to ~~/.authinfo.gpg~ file encrypted with ~gpg~
   (or ~~/.authinfo~ in plain text):

   - After providing your [[https://platform.openai.com][OpenAI account]] with some credits ($5.00 is
     enough to get started), create an OpenAI API key visiting
     https://platform.openai.com/api-keys.
   - Add that API key in one of the files mentioned above on a line
     like this

     #+BEGIN_SRC authinfo
     machine openai password <openai-api-key>
     #+END_SRC

     with ~<openai-api-key>~ being your API key.

3) Call the command ~eden~ to switch to ~*eden*~ prompt buffer,
4) Enter your prompt (i.e. ask something),
5) Hit ~C-c C-c~ to send that prompt to OpenAI API,
6) Receive the response asynchronously in a dedicated buffer that pops
   up upon receipt.

* Utility requirements

* Eden is simple

Eden is simple and rely exclusively on the ~eden~ command:

1) This command lets you switch to the prompt buffer displayed at the
   bottom of the frame on demand.  Once in that buffer (in ~eden-mode~)
   you can enter your prompt and send it to ~eden-api~ with ~eden-send~
   command bound by default to ~C-c C-c~.

2) It also lets you manage conversations and settings via a transient
   command, if it is called from the prompt buffer.  Specifically,
   calling it that way invokes ~eden-menu~, and after the menu poped up,
   you can for instance:

   - Start a new conversation pressing the key ~n~,
   - Switch to an existing conversation pressing the ~TAB~ key,
   - Paused a conversation pressing the ~SPC~ key,
   - Show the current settings pressing the key ~S~,
   - Set the current API pressing the key ~a~ or
   - Set the system message pressing the key ~'~.

3) Finally it can be used to continue a conversation from a request at
   point, or only inspect it, if we call it with the prefix argument
   ~C-u~.  Indeed, doing so invokes ~eden-req-at-point-menu~ which provides
   a menu with accepted actions on the request at point.

* Eden keeps all your requests in eden-dir

An important aspect of Eden is that none of the questions you asked to
the underlying LLM is lost.

Eden keeps every request sent to the OpenAI-compatible API in the
directory ~eden-dir~.  By default, it is the subdirectory ~eden~ in your
~user-emacs-directory~.

Each request identified by a UUID used as subdirectory in ~eden-dir~,
where relevant information about request are stored.

There some benefits to do that among these are:

- you can forget about your request, it will always be there,
- if you copied the org heading with the request's UUID somewhere else
  in your notes, you can lookup the request, jump to the directory and
  get all the information associated the request, API, model, system
  prompt, timestamp...
- if an error occurs while proceding the request, you can consult the
  ~error.json~ of that request and troubleshoot it,
- You can start or continue a conversation from any existing request
  (it seems to be called ~branching~):
  - either from req at point ... from a conversation in your notes
  - or in prompt buffer, navigate the history with M-p, M-n to find
    the request you're interested in, call ~eden~ to pop up the menu and
    press ~c~ to continue the conversation where you left it
- everything in json (or text format), so you can feed it to other
  software of your choice to analyze you request for instance,...

* Eden focuses on conversations but doesn't impose it

By default every requests sent to the current OpenAI-compatible API
are independant.

If you want to have a conversation where previous exchanges are
including belonging to that conversation are sent with newer request,
you can start or continue a conversation.

There several way to do that while you are in the prompt buffer:

1) You can start a conversation by calling ~eden~ command, pressing ~n~
   and entering its title.  This made that new empty conversation the
   current one, and each new request will be part of it.
2) You can start a conversation from the current request in history
   excluding previous exchanges.  First, use M-p and M-n to navigate
   the prompt history to find the request from which the conversation
   will start.  Then, call ~eden~ command, press ~s~ and enter its title.
   This made that new conversation, with already one exchange, the
   current one, and each new request will be part of it.
3) You can also continue a conversation.  It's almost the same as
   in 2) but including all the previous exchanges of the current
   request in history.  To do this, call ~eden~ command, press ~s~ and
   enter its title.

You can pause the current conversation in the prompt buffer by calling
~eden~ command and pressing ~SPC~.  Now, request that will be sent to
~eden-api~ will be independant again.

Note that conversations titles and IDs are not stored.  They only
serves during your Emacs session.  Don't worry, your conversations are
not lost forever when you stop your session, you can get it back with
the request ID of the last request in that conversation.  You either
saved the conversation somewhere in your note with its ID or you can
navigate the prompt history with M-p and M-n in the prompt buffer.

* What are requests at point?

* Managing settings with eden command

* Adding Perplexity API key

* Need more examples!  Check the docstrings

* scratch

- the prompt buffer expect text in org-mode format
- responses are presented in org-mode buffer making them
  straightforward to integrate in your org-mode note just by copy
  pasting
- the most important variable ~eden-dir~ ... this where all your request
  are stored...
- By default request are independent...
- M-n and M-p in ~eden~ prompt buffer to navigate prompt history...
- but you can start a conversation...
- if you want to change the setting...
- request at point... C-u M-x eden ...
- please check the docstrings there well detailed with examples...

-----
- https://platform.openai.com/docs/guides/text-generation/,
- https://platform.openai.com/docs/api-reference/chat and
- https://docs.perplexity.ai/api-reference/chat-completions.
