Eden is an AI assistant package for Emacs.

It offers a simple interface for:

1) OpenAI LLM models (like ~gpt-4o~ and ~o1~) and
2) Perplexity AI powered answer engine.

More broadly it works with any OpenAI-compatible API.

* Get started in minutes

1) Ensure the directory holding ~eden.el~ file is in your ~load-path~ and
   require ~eden~ package.  This can be done by adding the following
   expressions to your init file (replacing ~/path/to/eden/~ with the
   correct directory location):

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "/path/to/eden/")
   (require 'eden)
   #+END_SRC

2) Add your OpenAI API key to ~~/.authinfo.gpg~ file encrypted with ~gpg~
   (or ~~/.authinfo~ in plain text):

   - After providing your [[https://platform.openai.com][OpenAI account]] with some credits ($5.00 is
     enough to get started), create an OpenAI API key visiting
     https://platform.openai.com/api-keys.
   - Add that API key in one of the files mentioned above on a line
     like this

     #+BEGIN_SRC authinfo
     machine openai password <openai-api-key>
     #+END_SRC

     with ~<openai-api-key>~ being your API key.

3) Call the command ~eden~ to switch to ~*eden*~ prompt buffer,
4) Enter your prompt (i.e. ask something),
5) Hit ~C-c C-c~ to send that prompt to OpenAI API,
6) Receive the response asynchronously in a dedicated buffer that pops
   up upon receipt.

* Eden is simple

Eden is simple and rely exclusively on the ~eden~ command:

1) This command lets you switch to the prompt buffer displayed at the
   bottom of the frame on demand.  Once in that buffer (in ~eden-mode~)
   you can enter your prompt and send it to ~eden-api~ with ~eden-send~
   command bound by default to ~C-c C-c~.

2) It also lets you manage conversations and settings via a transient
   command, if it is called from the prompt buffer.  Specifically,
   calling it that way invokes ~eden-menu~, and after the menu poped up,
   you can for instance:

   - Start a new conversation pressing the key ~n~,
   - Switch to an existing conversation pressing the ~TAB~ key,
   - Paused a conversation pressing the ~SPC~ key,
   - Show the current settings pressing the key ~S~,
   - Set the current API pressing the key ~a~ or
   - Set the system message pressing the key ~'~.

3) Finally it can be used to continue a conversation from a request at
   point, or only inspect it, if we call it with the prefix argument
   ~C-u~.  Indeed, doing so invokes ~eden-req-at-point-menu~ which provides
   a menu with accepted actions on the request at point.

* Eden keeps all your requests in eden-dir

* Eden focuses on conversations but doesn't impose it

* What are requests at point?

* Managing settings with eden command

* Adding Perplexity API key

* Need more examples!  Check the docstrings

* scratch

- the prompt buffer expect text in org-mode format
- responses are presented in org-mode buffer making them
  straightforward to integrate in your org-mode note just by copy
  pasting
- the most important variable ~eden-dir~ ... this where all your request
  are stored...
- By default request are independent...
- M-n and M-p in ~eden~ prompt buffer to navigate prompt history...
- but you can start a conversation...
- if you want to change the setting...
- request at point... C-u M-x eden ...
- please check the docstrings there well detailed with examples...

-----
- https://platform.openai.com/docs/guides/text-generation/,
- https://platform.openai.com/docs/api-reference/chat and
- https://docs.perplexity.ai/api-reference/chat-completions.
