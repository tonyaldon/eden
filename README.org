*Eden* is a simple *ChatGPT* client for Emacs that focuses on
conversations.

*Eden* supports OpenAI, Anthropic, Deepseek, Perplexity, and X.ai APIs.
For reasoning models, you can choose whether or not to display the
reasoning.  For Perplexity and OpenAI web search, while citations are
inlined, you can also list them in a dedicated buffer.

*Eden*'s interface is simple:

- You want to ask something to *ChatGPT*?  Call ~eden~ command, enter your
  prompt, press ~C-c C-c~ and you're done.
- You want to integrate the response in your ~org-mode~ notes?  Just
  copy/paste it.
- You want to continue a conversation saved in your ~org-mode~ notes?
  Call ~eden~ with the ~C-u~ prefix argument which opens a transient
  menu, then press ~c~ to to continue the conversation whose last
  request is the request at point.
- You want to switch the API and the model?  Just call ~eden~ in the
  prompt buffer, then press ~a~ to change the API and ~m~ to change the
  model.
- You want to continue a conversation from a previous request?
  Simple!  In the prompt buffer, navigate through the prompt history
  using ~M-p~ and ~M-n~ to find the desired request, open the menu calling
  ~eden~ and press ~c~ to continue the conversation from that request.

Note that requests are independent by default.  To link them together,
you must be in a conversation.

Another key feature of *Eden* is its ability to keep track of all your
interactions with *ChatGPT*.  Each request is stored in the ~eden-dir~
directory, providing a range of benefits:

1) Requests are always preserved, ensuring you can retrieve them at
   any time.
2) Should an error occur during processing, the corresponding
   ~error.json~ file can be consulted for troubleshooting.
3) All data is stored in JSON (or text format), facilitating
   integration with other software for further analysis.
4) You can start or continue a conversation from any existing request
   (a feature known as "branching"):
   - Either from a request at point in your notes,
   - Or navigating through history in the prompt buffer using ~M-p~ and
     ~M-n~ to find the desired request, opening the menu with ~eden~, and
     pressing ~c~ to continue the conversation or ~s~ to start a new
     conversation from the request.
5) All data is stored in JSON (or text format), facilitating
   integration with other software for further analysis.

* Get started in minutes

1) Ensure the following utilities are installed and present in one
   of your ~exec-path~ directories:

   - ~curl~
   - ~uuidgen~
   - ~pandoc~

2) Add the directory containing ~eden.el~ to your ~load-path~ and
   require the *Eden* package by adding the following lines to your init
   file, ensuring to replace ~/path/to/eden/~ with the appropriate
   directory:

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "/path/to/eden/")
   (require 'eden)
   #+END_SRC

3) Store your OpenAI API key in either the ~~/.authinfo.gpg~ file
   (encrypted with ~gpg~) or the ~~/.authinfo~ file (plaintext):

   - After funding your [[https://platform.openai.com][OpenAI account]] ($5.00 is enough to get
     started), create an OpenAI API key visiting
     https://platform.openai.com/api-keys.
   - Add the API key in the selected file as follows:

     #+BEGIN_SRC authinfo
     machine openai password <openai-api-key>
     #+END_SRC

     where ~<openai-api-key>~ is your API key.

   - Restart Emacs to apply this change.

4) Call the command ~eden~ to switch to ~*eden*~ prompt buffer,
5) Enter your prompt,
6) Press ~C-c C-c~ to send your prompt to OpenAI API,
7) Finally, the response will asynchronously show up in a dedicated
   buffer upon receipt.

* Utility requirements

Ensure the following utilities are installed and present in one
of your ~exec-path~ directories:

- ~curl~
- ~uuidgen~
- ~pandoc~

* What are requests at point?

Calling ~eden~ with the ~C-u~ prefix argument opens a menu with available
actions related to the request at point.

If the point is on an ~org-mode~ heading which includes the
property ~eden-org-property-req~ (by default ~EDEN_REQ~), indicating that
a request exists at that position, you can apply one of the action
listed in the menu.

For instance:

- Pressing ~c~ will continue a conversation whose last request is the
  request at point,
- Pressing ~b~ will show the conversation branches of the request at
  point (all the conversations containing the request at point).

* Configuring Eden

In the prompt buffer, you can call ~eden~ and press ~C~ to show the
current configuration.

From the menu provided by ~eden~, you can modify the current
configuration doing the following

- Press ~a~ to set the current API (~eden-api-set~),
- Press ~m~ to set the model for the current API (~eden-model-set~),
- Press ~t~ to set the temperature (~eden-temperature-set~),
- Press ~i~ to include reasoning information (~eden-include-reasoning-toggle~),
- Press ~o~ to access another menu with more options (~eden-more-options-menu~),
- Press ~d~ to set the request directory (~eden-dir-set~),

or the following for modifying the system message:

- Press ~S~ to add a system message (~eden-system-message-add~),
- Press ~u~ to update the system message (~eden-system-message-update~),
- Press ~p~ to pick a system message (~eden-system-message-set~),
- Press ~r~ to reset the system message (~eden-system-message-reset~).

** Navigating the profile history

Each time you quit Eden's menu, the current *profile* which includes

- the API,
- the request directory,
- the model,
- if you include the reasoning,
- the temperature,
- the current conversation if any, and,
- the system message if any

is pushed to an history that you can navigate from the prompt buffer
with:

- ~C-M-p~ bound to ~eden-profile-previous~ and
- ~C-M-n~ bound to ~eden-profile-next~.

** The complete list of user variables

The complete list of user variables you may want to adjust includes:

- ~eden-api~
- ~eden-apis~
- ~eden-model~
- ~eden-temperature~
- ~eden-system-message~
- ~eden-system-messages~
- ~eden-system-message->developer-for-models~
- ~eden-dir~
- ~eden-anthropic-max-tokens~
- ~eden-anthropic-thinking-budget-tokens~
- ~eden-web-search-context-size~
- ~eden-org-property-date~
- ~eden-org-property-model~
- ~eden-org-property-req~
- ~eden-pops-up-upon-receipt~
- ~eden-include-reasoning~
- ~eden-prompt-buffer-name~

For more information on these variables, consult their documentation
in the ~*Help*~ buffer using ~describe-variable~ command, bound by default
to ~C-h v~.

* Adding API keys to ~~/.authinfo~ or ~~/.authinfo.gpg~

To use the APIs from OpenAI, Anthropic, Deepseek, Perplexity, or X.ai
you need to store their API key in either the ~~/.authinfo.gpg~ file
(encrypted with ~gpg~) or the ~~/.authinfo~ file (plaintext) as follow:

#+BEGIN_SRC authinfo
machine openai password <openai-api-key>
machine anthropic password <anthropic-api-key>
machine deepseek password <deepseek-api-key>
machine perplexity password <perplexity-api-key>
machine x.ai password <x.ai-api-key>
#+END_SRC

You can create new API keys at the following links:

- https://platform.openai.com/api-keys
- https://console.anthropic.com/settings/keys
- https://platform.deepseek.com/api_keys
- https://perplexity.ai/account/api/keys
- https://console.x.ai
